{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/SpinnerLoader.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","className","type","value","placeholder","onChange","target","name","size","color","rotate","GifGridItem","title","url","src","alt","getGifs","category","limitValue","a","query","encodeURI","limit","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","SpinnerLoader","GifGrid","loading","state","setState","useEffect","then","imgs","dataLength","useFetchGifs","results","item","GifExpertApp","href","root","document","getElementById","ReactDOM","render"],"mappings":"sLAIaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAE5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,uBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,EAAaE,GACbC,EAAc,MAKkBM,UAAU,eAA5C,UACE,uBACEC,KAAK,OACLC,MAAUT,EACVU,YAAc,2BACdC,SAnBqB,SAACR,GAC1BF,EAAcE,EAAES,OAAOH,UAqBrB,wBAAQF,UAAU,aAAlB,SAA+B,0BAAUM,KAAK,SAASC,KAAK,KAAKC,MAAM,QAAQC,OAAO,aC7B/EC,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAClC,OACE,qBAAKZ,UAAY,2DAAjB,SACE,qBAAKa,IAAKD,EAAKE,IAAKH,O,uBCFbI,EAAO,uCAAG,WAAMC,EAAUC,GAAhB,2BAAAC,EAAA,4DAET,wCACG,4CACTC,EAJe,YAIFC,UAAWJ,IACxBK,EALe,iBAKGJ,GAElBL,EALM,wCAKMO,EAAQE,EAJX,4CAHM,SAQFC,MAAQV,GARN,cAQfW,EARe,iBASAA,EAAKC,OATL,wBASdC,EATc,EASdA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAKgB,EAAIE,OAAOC,iBAAiBnB,QAhBhB,kBAqBdc,GArBc,4CAAH,wDCDPM,EAAgB,WAG3B,OAAO,qBAAKhC,UAAU,iBAAiBa,IADtB,qFACuCC,IAAI,aCAjDmB,EAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAGxB,ECF0B,SAACA,EAAUC,GAErC,MAA0BzB,mBAAS,CACjCiC,KAAM,GACNS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WAETtB,EAAQC,EAAUC,GACfqB,MAAM,SAAAC,GAEHH,EAAS,CACPX,KAAMc,EACNC,WAAYD,EAAKxC,OACjBmC,SAAS,SAIhB,CAAClB,EAAUC,IAEPkB,EDnBsCM,CAAazB,EADvC,IACNc,EAAb,EAAQL,KAAae,EAArB,EAAqBA,WAAYN,EAAjC,EAAiCA,QAE3BQ,EAAUZ,EAAO/B,OAEvB,OACE,sBAAKC,UAAU,UAAf,UACE,+BAAMgB,EAAN,IAAmBc,GAAU,qCAAQY,EAAR,WAA7B,OAEER,GAAW,cAAC,EAAD,IAEI,IAAfM,GAAoB,8DAEtB,qBAAKxC,UAAY,YAAjB,SAEI8B,EAAOH,KAAK,SAAAgB,GAAI,OACd,cAAC,EAAD,CAEEhC,MAAUgC,EAAKhC,MACfC,IAAQ+B,EAAK/B,KAFL+B,EAAKd,aEpBde,EAAe,WAI1B,MAAgCpD,mBAAS,iBAAzC,mBAAOwB,EAAP,KAAiBzB,EAAjB,KAOA,OACE,sBAAKS,UAAU,yBAAf,UACE,mBAAG6C,KAAK,IAAR,SACE,qBACE7C,UAAU,aACVa,IAAI,+EACJC,IAAI,iBAMR,cAAC,EAAD,CAAavB,YAAgBA,IAE7B,cAAC,EAAD,CAEMyB,SAAaA,GADLA,OCzBd8B,G,MAAOC,SAASC,eAAe,SAErCC,IAASC,OAAQ,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.459b5517.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport 'boxicons'\r\n\r\nexport const AddCategory = ( {setCategory} ) => {\r\n\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  // Cambia el estado de nuestro input\r\n  const  handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if(inputValue.trim().length > 0){\r\n      setCategory( inputValue );\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit = { handleSubmit } className='search-input'>\r\n      <input \r\n        type=\"text\"\r\n        value = { inputValue }\r\n        placeholder = \"Ingresa una categoría\"\r\n        onChange = { handleInputChange }\r\n      />\r\n      \r\n      <button className=\"btn-search\"><box-icon name='search' size='md' color='white' rotate='90'></box-icon></button>\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategory: PropTypes.func.isRequired\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n  return (\r\n    <div className = \"card animate__animated animate__fadeInUp animate__faster\">\r\n      <img src={url} alt={title} />\r\n    </div>\r\n  )\r\n}\r\n","\r\n\r\n// Petición a la API Giphy\r\nexport const getGifs = async(category, limitValue) => {\r\n\r\n  const api = 'https://api.giphy.com/v1/gifs/search?'\r\n  const apiKey = '&api_key=wryjtazKZ7YGqtjhFXJkVj1waY1OcmgM';\r\n  const query = `q=${encodeURI (category)}`;\r\n  const limit = `&limit=${limitValue}`;\r\n\r\n  const url = api + query + limit + apiKey;\r\n  const resp = await fetch ( url );\r\n  const {data} = await resp.json();\r\n  \r\n  // Elimina toda la información irrelevante de data\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url\r\n    }\r\n  });\r\n  // console.log(gifs)\r\n\r\n  return gifs;\r\n  \r\n}","import React from 'react'\r\n\r\nexport const SpinnerLoader = () => {\r\n\r\n  const urlImage = 'https://webcorporativa.bankinter.com/www/webcorp/3D/resources/images/precarga2.gif'\r\n  return <img className='spinner-loader' src={ urlImage } alt='Loading'/>  \r\n\r\n}\r\n","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { SpinnerLoader } from './SpinnerLoader';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n  const limitValue = 50;\r\n  const { data:images, dataLength, loading } = useFetchGifs(category, limitValue);\r\n\r\n  const results = images.length;\r\n\r\n  return (\r\n    <div className='GifGrid'>\r\n      <h2>{ category } { images && <span> {results} GIFs</span>} </h2>\r\n\r\n      { loading && <SpinnerLoader />}\r\n      \r\n      { dataLength === 0 && <h1>No se encontraron resultados</h1> }\r\n\r\n      <div className = \"card-grid\">\r\n        {\r\n          images.map( item =>\r\n            <GifGridItem  \r\n              key = { item.id } \r\n              title = { item.title }\r\n              url = { item.url }\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","\r\n// Custom Hook\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category, limitValue) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect( () => {\r\n\r\n    getGifs(category, limitValue)\r\n      .then( imgs => {\r\n\r\n          setState({\r\n            data: imgs,\r\n            dataLength: imgs.length,\r\n            loading: false\r\n          })\r\n\r\n      })\r\n  }, [category, limitValue])\r\n\r\n  return state;\r\n\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  // const categories = ['Drive To Survive', 'El juego del calamar', 'Lucifer'];\r\n  // const drivers = ['Lewis Hamilton'];\r\n  const [category, setCategory] = useState('trending-gifs');\r\n\r\n  // const handleAdd = () => {\r\n  //   // setCategories( cats => [...cats, 'Elite']);\r\n  //   setCategories( [...categories, 'Stranger Things']);\r\n  // }\r\n  \r\n  return(\r\n    <div className='GifExpertApp container'>\r\n      <a href=\".\">\r\n        <img \r\n          className='giphy-logo' \r\n          src=\"https://i.pinimg.com/originals/58/e3/83/58e3834fdfe26e6d1853eb14d89cbff1.gif\" \r\n          alt=\"Giphy logo\" \r\n        />\r\n      </a>\r\n      \r\n\r\n      {/* Input */}\r\n      <AddCategory setCategory = { setCategory }/>\r\n\r\n      <GifGrid \r\n            key = { category }\r\n            category = { category }\r\n      />\r\n \r\n        {/* {\r\n          categories.map( category => \r\n            <GifGrid \r\n              key = { category }\r\n              category = { category }\r\n            />\r\n          )\r\n        } */}\r\n\r\n    </div>\r\n  );\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nconst root = document.getElementById('root')\n\nReactDOM.render( <GifExpertApp />, root );\n"],"sourceRoot":""}